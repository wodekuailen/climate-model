"""
PV model component.
Models the behavior of the photovoltaic material.
"""

import numpy as np
import pandas as pd
from . import config

class PVModel:
    # Source for parameters: https://www.osti.gov/biblio/1784901
    # "Temperature Coefficients of Perovskite Photovoltaics for Energy Yield Calculations"
    # Efficiency is a general value for modern perovskite cells.
    # Albedo is a general estimate for dark solar panels.
    def __init__(self, efficiency=0.25, area=1.0, temp_coeff=-0.0008, albedo=0.15):
        self.efficiency = efficiency  # Power conversion efficiency (unitless)
        self.area = area              # Area of the panel in m^2
        self.temp_coeff = temp_coeff  # Power efficiency temperature coefficient (%/C)
        self.albedo = albedo          # Albedo of the panel surface (unitless)
        print("PVModel initialized with Perovskite parameters.")

    def calculate_power(self, insolation, temperature):
        """
        Calculates the power output of the PV panel.
        Insolation is in W/m^2.
        Temperature is in degrees Celsius.
        """
        # A simple model: power is proportional to insolation and efficiency
        power = insolation * self.area * self.efficiency
        
        # Temperature effects (standard model using a reference temperature of 25 C)
        power *= (1 + (temperature - 25) * self.temp_coeff)
        
        # print(f"Calculating PV power: {power:.2f} W")
        return power

    def get_albedo_effect(self):
        """
        Returns the albedo of the PV panel.
        The climate model will use this to calculate the change in absorbed radiation.
        """
        return self.albedo 

def calculate_pv_power(solar_irradiance, air_temperature, efficiency, temperature_coefficient, panel_area_m2):
    """
    Calculates the power output of a PV panel.

    Args:
        solar_irradiance (pd.Series): Solar irradiance data in W/m^2.
        air_temperature (pd.Series): Air temperature data in degrees Celsius.
        efficiency (float): The nominal efficiency of the panel at STC (Standard Test Conditions).
        temperature_coefficient (float): The percentage decrease in efficiency per degree C above STC.
        panel_area_m2 (float): The total area of the PV panels in square meters.

    Returns:
        pd.Series: The electrical power generated by the panels in Watts.
    """
    # Standard Test Condition (STC) temperature
    stc_temp_c = 25.0

    # Calculate efficiency derating due to temperature
    # For each degree above 25Â°C, efficiency drops by the temperature_coefficient
    # We will assume a simplified model where panel temperature is close to air temperature.
    # A more complex model would calculate panel temperature based on irradiance, wind speed, etc.
    temp_derating_factor = 1 + (air_temperature - stc_temp_c) * (temperature_coefficient / 100)
    
    # Ensure the derating factor doesn't become negative or excessively high
    temp_derating_factor = temp_derating_factor.clip(lower=0.1)

    # Effective efficiency considering temperature
    effective_efficiency = efficiency * temp_derating_factor

    # Power output in Watts
    power_watts = solar_irradiance * panel_area_m2 * effective_efficiency

    # Power cannot be generated at night
    power_watts[solar_irradiance <= 0] = 0

    return power_watts 